{"ast":null,"code":"import { __decorate, __metadata } from 'tslib';\nimport { Directionality, BidiModule } from '@angular/cdk/bidi';\nimport { Injectable, InjectionToken, SkipSelf, Optional, Inject, Directive, ChangeDetectorRef, Input, ContentChildren, EventEmitter, Component, ViewEncapsulation, ChangeDetectionStrategy, Host, Output, ViewChild, ElementRef, Renderer2, NgModule } from '@angular/core';\nimport { InputBoolean } from 'ng-zorro-antd/core/util';\nimport { Subject, BehaviorSubject, merge, combineLatest } from 'rxjs';\nimport { map, mergeMap, filter, mapTo, auditTime, distinctUntilChanged, takeUntil, startWith, switchMap } from 'rxjs/operators';\nimport { NavigationEnd, RouterLink, RouterLinkWithHref, Router } from '@angular/router';\nimport { CdkOverlayOrigin, OverlayModule } from '@angular/cdk/overlay';\nimport { Platform, PlatformModule } from '@angular/cdk/platform';\nimport { NzNoAnimationDirective, NzNoAnimationModule } from 'ng-zorro-antd/core/no-animation';\nimport { POSITION_MAP, getPlacementName } from 'ng-zorro-antd/core/overlay';\nimport { collapseMotion, zoomBigMotion, slideMotion } from 'ng-zorro-antd/core/animation';\nimport { CommonModule } from '@angular/common';\nimport { NzOutletModule } from 'ng-zorro-antd/core/outlet';\nimport { NzIconModule } from 'ng-zorro-antd/icon';\n\n/**\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://github.com/NG-ZORRO/ng-zorro-antd/blob/master/LICENSE\n */\nclass MenuService {\n  constructor() {\n    /** all descendant menu click **/\n    this.descendantMenuItemClick$ = new Subject();\n    /** child menu item click **/\n    this.childMenuItemClick$ = new Subject();\n    this.theme$ = new BehaviorSubject('light');\n    this.mode$ = new BehaviorSubject('vertical');\n    this.inlineIndent$ = new BehaviorSubject(24);\n    this.isChildSubMenuOpen$ = new BehaviorSubject(false);\n  }\n  onDescendantMenuItemClick(menu) {\n    this.descendantMenuItemClick$.next(menu);\n  }\n  onChildMenuItemClick(menu) {\n    this.childMenuItemClick$.next(menu);\n  }\n  setMode(mode) {\n    this.mode$.next(mode);\n  }\n  setTheme(theme) {\n    this.theme$.next(theme);\n  }\n  setInlineIndent(indent) {\n    this.inlineIndent$.next(indent);\n  }\n}\n/**\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://github.com/NG-ZORRO/ng-zorro-antd/blob/master/LICENSE\n */\nconst NzIsMenuInsideDropDownToken = new InjectionToken('NzIsInDropDownMenuToken');\nconst NzMenuServiceLocalToken = new InjectionToken('NzMenuServiceLocalToken');\n\n/**\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://github.com/NG-ZORRO/ng-zorro-antd/blob/master/LICENSE\n */\nclass NzSubmenuService {\n  constructor(nzHostSubmenuService, nzMenuService, isMenuInsideDropDown) {\n    this.nzHostSubmenuService = nzHostSubmenuService;\n    this.nzMenuService = nzMenuService;\n    this.isMenuInsideDropDown = isMenuInsideDropDown;\n    this.mode$ = this.nzMenuService.mode$.pipe(map(mode => {\n      if (mode === 'inline') {\n        return 'inline';\n        /** if inside another submenu, set the mode to vertical **/\n      } else if (mode === 'vertical' || this.nzHostSubmenuService) {\n        return 'vertical';\n      } else {\n        return 'horizontal';\n      }\n    }));\n    this.level = 1;\n    this.isCurrentSubMenuOpen$ = new BehaviorSubject(false);\n    this.isChildSubMenuOpen$ = new BehaviorSubject(false);\n    /** submenu title & overlay mouse enter status **/\n    this.isMouseEnterTitleOrOverlay$ = new Subject();\n    this.childMenuItemClick$ = new Subject();\n    if (this.nzHostSubmenuService) {\n      this.level = this.nzHostSubmenuService.level + 1;\n    }\n    /** close if menu item clicked **/\n    const isClosedByMenuItemClick = this.childMenuItemClick$.pipe(mergeMap(() => this.mode$), filter(mode => mode !== 'inline' || this.isMenuInsideDropDown), mapTo(false));\n    const isCurrentSubmenuOpen$ = merge(this.isMouseEnterTitleOrOverlay$, isClosedByMenuItemClick);\n    /** combine the child submenu status with current submenu status to calculate host submenu open **/\n    const isSubMenuOpenWithDebounce$ = combineLatest([this.isChildSubMenuOpen$, isCurrentSubmenuOpen$]).pipe(map(([isChildSubMenuOpen, isCurrentSubmenuOpen]) => isChildSubMenuOpen || isCurrentSubmenuOpen), auditTime(150), distinctUntilChanged());\n    isSubMenuOpenWithDebounce$.pipe(distinctUntilChanged()).subscribe(data => {\n      this.setOpenStateWithoutDebounce(data);\n      if (this.nzHostSubmenuService) {\n        /** set parent submenu's child submenu open status **/\n        this.nzHostSubmenuService.isChildSubMenuOpen$.next(data);\n      } else {\n        this.nzMenuService.isChildSubMenuOpen$.next(data);\n      }\n    });\n  }\n  /**\n   * menu item inside submenu clicked\n   * @param menu\n   */\n  onChildMenuItemClick(menu) {\n    this.childMenuItemClick$.next(menu);\n  }\n  setOpenStateWithoutDebounce(value) {\n    this.isCurrentSubMenuOpen$.next(value);\n  }\n  setMouseEnterTitleOrOverlayState(value) {\n    this.isMouseEnterTitleOrOverlay$.next(value);\n  }\n}\n/**\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://github.com/NG-ZORRO/ng-zorro-antd/blob/master/LICENSE\n */\nlet NzMenuItemDirective = /*#__PURE__*/(() => {\n  class NzMenuItemDirective {\n    constructor(nzMenuService, cdr, nzSubmenuService, isMenuInsideDropDown, directionality, routerLink, routerLinkWithHref, router) {\n      this.nzMenuService = nzMenuService;\n      this.cdr = cdr;\n      this.nzSubmenuService = nzSubmenuService;\n      this.isMenuInsideDropDown = isMenuInsideDropDown;\n      this.directionality = directionality;\n      this.routerLink = routerLink;\n      this.routerLinkWithHref = routerLinkWithHref;\n      this.router = router;\n      this.destroy$ = new Subject();\n      this.level = this.nzSubmenuService ? this.nzSubmenuService.level + 1 : 1;\n      this.selected$ = new Subject();\n      this.inlinePaddingLeft = null;\n      this.dir = 'ltr';\n      this.nzDisabled = false;\n      this.nzSelected = false;\n      this.nzDanger = false;\n      this.nzMatchRouterExact = false;\n      this.nzMatchRouter = false;\n      if (router) {\n        this.router.events.pipe(takeUntil(this.destroy$), filter(e => e instanceof NavigationEnd)).subscribe(() => {\n          this.updateRouterActive();\n        });\n      }\n    }\n    /** clear all item selected status except this */\n    clickMenuItem(e) {\n      if (this.nzDisabled) {\n        e.preventDefault();\n        e.stopPropagation();\n      } else {\n        this.nzMenuService.onDescendantMenuItemClick(this);\n        if (this.nzSubmenuService) {\n          /** menu item inside the submenu **/\n          this.nzSubmenuService.onChildMenuItemClick(this);\n        } else {\n          /** menu item inside the root menu **/\n          this.nzMenuService.onChildMenuItemClick(this);\n        }\n      }\n    }\n    setSelectedState(value) {\n      this.nzSelected = value;\n      this.selected$.next(value);\n    }\n    updateRouterActive() {\n      if (!this.listOfRouterLink || !this.listOfRouterLinkWithHref || !this.router || !this.router.navigated || !this.nzMatchRouter) {\n        return;\n      }\n      Promise.resolve().then(() => {\n        const hasActiveLinks = this.hasActiveLinks();\n        if (this.nzSelected !== hasActiveLinks) {\n          this.nzSelected = hasActiveLinks;\n          this.setSelectedState(this.nzSelected);\n          this.cdr.markForCheck();\n        }\n      });\n    }\n    hasActiveLinks() {\n      const isActiveCheckFn = this.isLinkActive(this.router);\n      return this.routerLink && isActiveCheckFn(this.routerLink) || this.routerLinkWithHref && isActiveCheckFn(this.routerLinkWithHref) || this.listOfRouterLink.some(isActiveCheckFn) || this.listOfRouterLinkWithHref.some(isActiveCheckFn);\n    }\n    isLinkActive(router) {\n      return link => router.isActive(link.urlTree, this.nzMatchRouterExact);\n    }\n    ngOnInit() {\n      var _a;\n      /** store origin padding in padding */\n      combineLatest([this.nzMenuService.mode$, this.nzMenuService.inlineIndent$]).pipe(takeUntil(this.destroy$)).subscribe(([mode, inlineIndent]) => {\n        this.inlinePaddingLeft = mode === 'inline' ? this.level * inlineIndent : null;\n      });\n      this.dir = this.directionality.value;\n      (_a = this.directionality.change) === null || _a === void 0 ? void 0 : _a.pipe(takeUntil(this.destroy$)).subscribe(direction => {\n        this.dir = direction;\n      });\n    }\n    ngAfterContentInit() {\n      this.listOfRouterLink.changes.pipe(takeUntil(this.destroy$)).subscribe(() => this.updateRouterActive());\n      this.listOfRouterLinkWithHref.changes.pipe(takeUntil(this.destroy$)).subscribe(() => this.updateRouterActive());\n      this.updateRouterActive();\n    }\n    ngOnChanges(changes) {\n      if (changes.nzSelected) {\n        this.setSelectedState(this.nzSelected);\n      }\n    }\n    ngOnDestroy() {\n      this.destroy$.next();\n      this.destroy$.complete();\n    }\n  }\n  __decorate([InputBoolean(), __metadata(\"design:type\", Object)], NzMenuItemDirective.prototype, \"nzDisabled\", void 0);\n  __decorate([InputBoolean(), __metadata(\"design:type\", Object)], NzMenuItemDirective.prototype, \"nzSelected\", void 0);\n  __decorate([InputBoolean(), __metadata(\"design:type\", Object)], NzMenuItemDirective.prototype, \"nzDanger\", void 0);\n  __decorate([InputBoolean(), __metadata(\"design:type\", Object)], NzMenuItemDirective.prototype, \"nzMatchRouterExact\", void 0);\n  __decorate([InputBoolean(), __metadata(\"design:type\", Object)], NzMenuItemDirective.prototype, \"nzMatchRouter\", void 0);\n\n  /**\n   * Use of this source code is governed by an MIT-style license that can be\n   * found in the LICENSE file at https://github.com/NG-ZORRO/ng-zorro-antd/blob/master/LICENSE\n   */\n  return NzMenuItemDirective;\n})();\nconst listOfVerticalPositions = [POSITION_MAP.rightTop, POSITION_MAP.right, POSITION_MAP.rightBottom, POSITION_MAP.leftTop, POSITION_MAP.left, POSITION_MAP.leftBottom];\nconst listOfHorizontalPositions = [POSITION_MAP.bottomLeft];\nlet NzSubMenuComponent = /*#__PURE__*/(() => {\n  class NzSubMenuComponent {\n    constructor(nzMenuService, cdr, nzSubmenuService, platform, isMenuInsideDropDown, directionality, noAnimation) {\n      this.nzMenuService = nzMenuService;\n      this.cdr = cdr;\n      this.nzSubmenuService = nzSubmenuService;\n      this.platform = platform;\n      this.isMenuInsideDropDown = isMenuInsideDropDown;\n      this.directionality = directionality;\n      this.noAnimation = noAnimation;\n      this.nzMenuClassName = '';\n      this.nzPaddingLeft = null;\n      this.nzTitle = null;\n      this.nzIcon = null;\n      this.nzOpen = false;\n      this.nzDisabled = false;\n      this.nzOpenChange = new EventEmitter();\n      this.cdkOverlayOrigin = null;\n      this.listOfNzSubMenuComponent = null;\n      this.listOfNzMenuItemDirective = null;\n      this.level = this.nzSubmenuService.level;\n      this.destroy$ = new Subject();\n      this.position = 'right';\n      this.triggerWidth = null;\n      this.theme = 'light';\n      this.mode = 'vertical';\n      this.inlinePaddingLeft = null;\n      this.overlayPositions = listOfVerticalPositions;\n      this.isSelected = false;\n      this.isActive = false;\n      this.dir = 'ltr';\n    }\n    /** set the submenu host open status directly **/\n    setOpenStateWithoutDebounce(open) {\n      this.nzSubmenuService.setOpenStateWithoutDebounce(open);\n    }\n    toggleSubMenu() {\n      this.setOpenStateWithoutDebounce(!this.nzOpen);\n    }\n    setMouseEnterState(value) {\n      this.isActive = value;\n      if (this.mode !== 'inline') {\n        this.nzSubmenuService.setMouseEnterTitleOrOverlayState(value);\n      }\n    }\n    setTriggerWidth() {\n      if (this.mode === 'horizontal' && this.platform.isBrowser && this.cdkOverlayOrigin) {\n        /** TODO: fast dom **/\n        this.triggerWidth = this.cdkOverlayOrigin.nativeElement.getBoundingClientRect().width;\n      }\n    }\n    onPositionChange(position) {\n      const placement = getPlacementName(position);\n      if (placement === 'rightTop' || placement === 'rightBottom' || placement === 'right') {\n        this.position = 'right';\n      } else if (placement === 'leftTop' || placement === 'leftBottom' || placement === 'left') {\n        this.position = 'left';\n      }\n      this.cdr.markForCheck();\n    }\n    ngOnInit() {\n      var _a;\n      /** submenu theme update **/\n      this.nzMenuService.theme$.pipe(takeUntil(this.destroy$)).subscribe(theme => {\n        this.theme = theme;\n        this.cdr.markForCheck();\n      });\n      /** submenu mode update **/\n      this.nzSubmenuService.mode$.pipe(takeUntil(this.destroy$)).subscribe(mode => {\n        this.mode = mode;\n        if (mode === 'horizontal') {\n          this.overlayPositions = listOfHorizontalPositions;\n        } else if (mode === 'vertical') {\n          this.overlayPositions = listOfVerticalPositions;\n        }\n        this.cdr.markForCheck();\n      });\n      /** inlineIndent update **/\n      combineLatest([this.nzSubmenuService.mode$, this.nzMenuService.inlineIndent$]).pipe(takeUntil(this.destroy$)).subscribe(([mode, inlineIndent]) => {\n        this.inlinePaddingLeft = mode === 'inline' ? this.level * inlineIndent : null;\n        this.cdr.markForCheck();\n      });\n      /** current submenu open status **/\n      this.nzSubmenuService.isCurrentSubMenuOpen$.pipe(takeUntil(this.destroy$)).subscribe(open => {\n        this.isActive = open;\n        if (open !== this.nzOpen) {\n          this.setTriggerWidth();\n          this.nzOpen = open;\n          this.nzOpenChange.emit(this.nzOpen);\n          this.cdr.markForCheck();\n        }\n      });\n      this.dir = this.directionality.value;\n      (_a = this.directionality.change) === null || _a === void 0 ? void 0 : _a.pipe(takeUntil(this.destroy$)).subscribe(direction => {\n        this.dir = direction;\n        this.cdr.markForCheck();\n      });\n    }\n    ngAfterContentInit() {\n      this.setTriggerWidth();\n      const listOfNzMenuItemDirective = this.listOfNzMenuItemDirective;\n      const changes = listOfNzMenuItemDirective.changes;\n      const mergedObservable = merge(...[changes, ...listOfNzMenuItemDirective.map(menu => menu.selected$)]);\n      changes.pipe(startWith(listOfNzMenuItemDirective), switchMap(() => mergedObservable), startWith(true), map(() => listOfNzMenuItemDirective.some(e => e.nzSelected)), takeUntil(this.destroy$)).subscribe(selected => {\n        this.isSelected = selected;\n        this.cdr.markForCheck();\n      });\n    }\n    ngOnChanges(changes) {\n      const {\n        nzOpen\n      } = changes;\n      if (nzOpen) {\n        this.nzSubmenuService.setOpenStateWithoutDebounce(this.nzOpen);\n        this.setTriggerWidth();\n      }\n    }\n    ngOnDestroy() {\n      this.destroy$.next();\n      this.destroy$.complete();\n    }\n  }\n  __decorate([InputBoolean(), __metadata(\"design:type\", Object)], NzSubMenuComponent.prototype, \"nzOpen\", void 0);\n  __decorate([InputBoolean(), __metadata(\"design:type\", Object)], NzSubMenuComponent.prototype, \"nzDisabled\", void 0);\n\n  /**\n   * Use of this source code is governed by an MIT-style license that can be\n   * found in the LICENSE file at https://github.com/NG-ZORRO/ng-zorro-antd/blob/master/LICENSE\n   */\n  return NzSubMenuComponent;\n})();\nfunction MenuServiceFactory(serviceInsideDropDown, serviceOutsideDropDown) {\n  return serviceInsideDropDown ? serviceInsideDropDown : serviceOutsideDropDown;\n}\nfunction MenuDropDownTokenFactory(isMenuInsideDropDownToken) {\n  return isMenuInsideDropDownToken ? isMenuInsideDropDownToken : false;\n}\nlet NzMenuDirective = /*#__PURE__*/(() => {\n  class NzMenuDirective {\n    constructor(nzMenuService, isMenuInsideDropDown, cdr, directionality) {\n      this.nzMenuService = nzMenuService;\n      this.isMenuInsideDropDown = isMenuInsideDropDown;\n      this.cdr = cdr;\n      this.directionality = directionality;\n      this.nzInlineIndent = 24;\n      this.nzTheme = 'light';\n      this.nzMode = 'vertical';\n      this.nzInlineCollapsed = false;\n      this.nzSelectable = !this.isMenuInsideDropDown;\n      this.nzClick = new EventEmitter();\n      this.actualMode = 'vertical';\n      this.dir = 'ltr';\n      this.inlineCollapsed$ = new BehaviorSubject(this.nzInlineCollapsed);\n      this.mode$ = new BehaviorSubject(this.nzMode);\n      this.destroy$ = new Subject();\n      this.listOfOpenedNzSubMenuComponent = [];\n    }\n    setInlineCollapsed(inlineCollapsed) {\n      this.nzInlineCollapsed = inlineCollapsed;\n      this.inlineCollapsed$.next(inlineCollapsed);\n    }\n    updateInlineCollapse() {\n      if (this.listOfNzMenuItemDirective) {\n        if (this.nzInlineCollapsed) {\n          this.listOfOpenedNzSubMenuComponent = this.listOfNzSubMenuComponent.filter(submenu => submenu.nzOpen);\n          this.listOfNzSubMenuComponent.forEach(submenu => submenu.setOpenStateWithoutDebounce(false));\n        } else {\n          this.listOfOpenedNzSubMenuComponent.forEach(submenu => submenu.setOpenStateWithoutDebounce(true));\n          this.listOfOpenedNzSubMenuComponent = [];\n        }\n      }\n    }\n    ngOnInit() {\n      var _a;\n      combineLatest([this.inlineCollapsed$, this.mode$]).pipe(takeUntil(this.destroy$)).subscribe(([inlineCollapsed, mode]) => {\n        this.actualMode = inlineCollapsed ? 'vertical' : mode;\n        this.nzMenuService.setMode(this.actualMode);\n        this.cdr.markForCheck();\n      });\n      this.nzMenuService.descendantMenuItemClick$.pipe(takeUntil(this.destroy$)).subscribe(menu => {\n        this.nzClick.emit(menu);\n        if (this.nzSelectable && !menu.nzMatchRouter) {\n          this.listOfNzMenuItemDirective.forEach(item => item.setSelectedState(item === menu));\n        }\n      });\n      this.dir = this.directionality.value;\n      (_a = this.directionality.change) === null || _a === void 0 ? void 0 : _a.pipe(takeUntil(this.destroy$)).subscribe(direction => {\n        this.dir = direction;\n        this.nzMenuService.setMode(this.actualMode);\n        this.cdr.markForCheck();\n      });\n    }\n    ngAfterContentInit() {\n      this.inlineCollapsed$.pipe(takeUntil(this.destroy$)).subscribe(() => {\n        this.updateInlineCollapse();\n        this.cdr.markForCheck();\n      });\n    }\n    ngOnChanges(changes) {\n      const {\n        nzInlineCollapsed,\n        nzInlineIndent,\n        nzTheme,\n        nzMode\n      } = changes;\n      if (nzInlineCollapsed) {\n        this.inlineCollapsed$.next(this.nzInlineCollapsed);\n      }\n      if (nzInlineIndent) {\n        this.nzMenuService.setInlineIndent(this.nzInlineIndent);\n      }\n      if (nzTheme) {\n        this.nzMenuService.setTheme(this.nzTheme);\n      }\n      if (nzMode) {\n        this.mode$.next(this.nzMode);\n        if (!changes.nzMode.isFirstChange() && this.listOfNzSubMenuComponent) {\n          this.listOfNzSubMenuComponent.forEach(submenu => submenu.setOpenStateWithoutDebounce(false));\n        }\n      }\n    }\n    ngOnDestroy() {\n      this.destroy$.next();\n      this.destroy$.complete();\n    }\n  }\n  __decorate([InputBoolean(), __metadata(\"design:type\", Object)], NzMenuDirective.prototype, \"nzInlineCollapsed\", void 0);\n  __decorate([InputBoolean(), __metadata(\"design:type\", Object)], NzMenuDirective.prototype, \"nzSelectable\", void 0);\n\n  /**\n   * Use of this source code is governed by an MIT-style license that can be\n   * found in the LICENSE file at https://github.com/NG-ZORRO/ng-zorro-antd/blob/master/LICENSE\n   */\n  return NzMenuDirective;\n})();\nfunction MenuGroupFactory(isMenuInsideDropDownToken) {\n  return isMenuInsideDropDownToken ? isMenuInsideDropDownToken : false;\n}\nclass NzMenuGroupComponent {\n  constructor(elementRef, renderer, isMenuInsideDropDown) {\n    this.elementRef = elementRef;\n    this.renderer = renderer;\n    this.isMenuInsideDropDown = isMenuInsideDropDown;\n    const className = this.isMenuInsideDropDown ? 'ant-dropdown-menu-item-group' : 'ant-menu-item-group';\n    this.renderer.addClass(elementRef.nativeElement, className);\n  }\n  ngAfterViewInit() {\n    const ulElement = this.titleElement.nativeElement.nextElementSibling;\n    if (ulElement) {\n      /** add classname to ul **/\n      const className = this.isMenuInsideDropDown ? 'ant-dropdown-menu-item-group-list' : 'ant-menu-item-group-list';\n      this.renderer.addClass(ulElement, className);\n    }\n  }\n}\n/**\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://github.com/NG-ZORRO/ng-zorro-antd/blob/master/LICENSE\n */\nclass NzMenuDividerDirective {\n  constructor(elementRef, renderer) {\n    this.elementRef = elementRef;\n    this.renderer = renderer;\n    this.renderer.addClass(elementRef.nativeElement, 'ant-dropdown-menu-item-divider');\n  }\n}\n/**\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://github.com/NG-ZORRO/ng-zorro-antd/blob/master/LICENSE\n */\nclass NzSubMenuTitleComponent {\n  constructor(cdr, directionality) {\n    this.cdr = cdr;\n    this.directionality = directionality;\n    this.nzIcon = null;\n    this.nzTitle = null;\n    this.isMenuInsideDropDown = false;\n    this.nzDisabled = false;\n    this.paddingLeft = null;\n    this.mode = 'vertical';\n    this.toggleSubMenu = new EventEmitter();\n    this.subMenuMouseState = new EventEmitter();\n    this.dir = 'ltr';\n    this.destroy$ = new Subject();\n  }\n  ngOnInit() {\n    var _a;\n    this.dir = this.directionality.value;\n    (_a = this.directionality.change) === null || _a === void 0 ? void 0 : _a.pipe(takeUntil(this.destroy$)).subscribe(direction => {\n      this.dir = direction;\n      this.cdr.detectChanges();\n    });\n  }\n  ngOnDestroy() {\n    this.destroy$.next();\n    this.destroy$.complete();\n  }\n  setMouseState(state) {\n    if (!this.nzDisabled) {\n      this.subMenuMouseState.next(state);\n    }\n  }\n  clickTitle() {\n    if (this.mode === 'inline' && !this.nzDisabled) {\n      this.toggleSubMenu.emit();\n    }\n  }\n}\n/**\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://github.com/NG-ZORRO/ng-zorro-antd/blob/master/LICENSE\n */\nclass NzSubmenuInlineChildComponent {\n  constructor(elementRef, renderer, directionality) {\n    this.elementRef = elementRef;\n    this.renderer = renderer;\n    this.directionality = directionality;\n    this.templateOutlet = null;\n    this.menuClass = '';\n    this.mode = 'vertical';\n    this.nzOpen = false;\n    this.listOfCacheClassName = [];\n    this.expandState = 'collapsed';\n    this.dir = 'ltr';\n    this.destroy$ = new Subject();\n    // TODO: move to host after View Engine deprecation\n    this.elementRef.nativeElement.classList.add('ant-menu', 'ant-menu-inline', 'ant-menu-sub');\n  }\n  calcMotionState() {\n    if (this.nzOpen) {\n      this.expandState = 'expanded';\n    } else {\n      this.expandState = 'collapsed';\n    }\n  }\n  ngOnInit() {\n    var _a;\n    this.calcMotionState();\n    this.dir = this.directionality.value;\n    (_a = this.directionality.change) === null || _a === void 0 ? void 0 : _a.pipe(takeUntil(this.destroy$)).subscribe(direction => {\n      this.dir = direction;\n    });\n  }\n  ngOnChanges(changes) {\n    const {\n      mode,\n      nzOpen,\n      menuClass\n    } = changes;\n    if (mode || nzOpen) {\n      this.calcMotionState();\n    }\n    if (menuClass) {\n      if (this.listOfCacheClassName.length) {\n        this.listOfCacheClassName.filter(item => !!item).forEach(className => {\n          this.renderer.removeClass(this.elementRef.nativeElement, className);\n        });\n      }\n      if (this.menuClass) {\n        this.listOfCacheClassName = this.menuClass.split(' ');\n        this.listOfCacheClassName.filter(item => !!item).forEach(className => {\n          this.renderer.addClass(this.elementRef.nativeElement, className);\n        });\n      }\n    }\n  }\n  ngOnDestroy() {\n    this.destroy$.next();\n    this.destroy$.complete();\n  }\n}\n/**\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://github.com/NG-ZORRO/ng-zorro-antd/blob/master/LICENSE\n */\nclass NzSubmenuNoneInlineChildComponent {\n  constructor(elementRef, directionality) {\n    this.elementRef = elementRef;\n    this.directionality = directionality;\n    this.menuClass = '';\n    this.theme = 'light';\n    this.templateOutlet = null;\n    this.isMenuInsideDropDown = false;\n    this.mode = 'vertical';\n    this.position = 'right';\n    this.nzDisabled = false;\n    this.nzOpen = false;\n    this.subMenuMouseState = new EventEmitter();\n    this.expandState = 'collapsed';\n    this.dir = 'ltr';\n    this.destroy$ = new Subject();\n    // TODO: move to host after View Engine deprecation\n    this.elementRef.nativeElement.classList.add('ant-menu-submenu', 'ant-menu-submenu-popup');\n  }\n  setMouseState(state) {\n    if (!this.nzDisabled) {\n      this.subMenuMouseState.next(state);\n    }\n  }\n  ngOnDestroy() {\n    this.destroy$.next();\n    this.destroy$.complete();\n  }\n  calcMotionState() {\n    if (this.nzOpen) {\n      if (this.mode === 'horizontal') {\n        this.expandState = 'bottom';\n      } else if (this.mode === 'vertical') {\n        this.expandState = 'active';\n      }\n    } else {\n      this.expandState = 'collapsed';\n    }\n  }\n  ngOnInit() {\n    var _a;\n    this.calcMotionState();\n    this.dir = this.directionality.value;\n    (_a = this.directionality.change) === null || _a === void 0 ? void 0 : _a.pipe(takeUntil(this.destroy$)).subscribe(direction => {\n      this.dir = direction;\n    });\n  }\n  ngOnChanges(changes) {\n    const {\n      mode,\n      nzOpen\n    } = changes;\n    if (mode || nzOpen) {\n      this.calcMotionState();\n    }\n  }\n}\n/**\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://github.com/NG-ZORRO/ng-zorro-antd/blob/master/LICENSE\n */\nclass NzMenuModule {}\n/**\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://github.com/NG-ZORRO/ng-zorro-antd/blob/master/LICENSE\n */\n\n/**\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://github.com/NG-ZORRO/ng-zorro-antd/blob/master/LICENSE\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { MenuDropDownTokenFactory, MenuGroupFactory, MenuService, MenuServiceFactory, NzIsMenuInsideDropDownToken, NzMenuDirective, NzMenuDividerDirective, NzMenuGroupComponent, NzMenuItemDirective, NzMenuModule, NzMenuServiceLocalToken, NzSubMenuComponent, NzSubMenuTitleComponent, NzSubmenuInlineChildComponent, NzSubmenuNoneInlineChildComponent, NzSubmenuService };\n//# sourceMappingURL=ng-zorro-antd-menu.js.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}