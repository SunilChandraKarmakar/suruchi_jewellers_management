{"ast":null,"code":"import { __decorate, __metadata } from 'tslib';\nimport { FocusMonitor, A11yModule } from '@angular/cdk/a11y';\nimport { Directionality, BidiModule } from '@angular/cdk/bidi';\nimport { EventEmitter, Component, ChangeDetectionStrategy, ViewEncapsulation, Renderer2, ElementRef, Output, forwardRef, Optional, ChangeDetectorRef, ViewChild, Input, NgModule } from '@angular/core';\nimport { NG_VALUE_ACCESSOR, FormsModule } from '@angular/forms';\nimport { InputBoolean } from 'ng-zorro-antd/core/util';\nimport { Subject } from 'rxjs';\nimport { takeUntil } from 'rxjs/operators';\nimport { CommonModule } from '@angular/common';\n\n/**\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://github.com/NG-ZORRO/ng-zorro-antd/blob/master/LICENSE\n */\nclass NzCheckboxWrapperComponent {\n  constructor(renderer, elementRef) {\n    this.nzOnChange = new EventEmitter();\n    this.checkboxList = [];\n    renderer.addClass(elementRef.nativeElement, 'ant-checkbox-group');\n  }\n  addCheckbox(value) {\n    this.checkboxList.push(value);\n  }\n  removeCheckbox(value) {\n    this.checkboxList.splice(this.checkboxList.indexOf(value), 1);\n  }\n  onChange() {\n    const listOfCheckedValue = this.checkboxList.filter(item => item.nzChecked).map(item => item.nzValue);\n    this.nzOnChange.emit(listOfCheckedValue);\n  }\n}\n/**\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://github.com/NG-ZORRO/ng-zorro-antd/blob/master/LICENSE\n */\nlet NzCheckboxComponent = /*#__PURE__*/(() => {\n  class NzCheckboxComponent {\n    constructor(elementRef, nzCheckboxWrapperComponent, cdr, focusMonitor, directionality) {\n      this.elementRef = elementRef;\n      this.nzCheckboxWrapperComponent = nzCheckboxWrapperComponent;\n      this.cdr = cdr;\n      this.focusMonitor = focusMonitor;\n      this.directionality = directionality;\n      this.dir = 'ltr';\n      this.destroy$ = new Subject();\n      this.onChange = () => {};\n      this.onTouched = () => {};\n      this.nzCheckedChange = new EventEmitter();\n      this.nzValue = null;\n      this.nzAutoFocus = false;\n      this.nzDisabled = false;\n      this.nzIndeterminate = false;\n      this.nzChecked = false;\n      // TODO: move to host after View Engine deprecation\n      this.elementRef.nativeElement.classList.add('ant-checkbox-wrapper');\n    }\n    hostClick(e) {\n      e.preventDefault();\n      this.focus();\n      this.innerCheckedChange(!this.nzChecked);\n    }\n    innerCheckedChange(checked) {\n      if (!this.nzDisabled) {\n        this.nzChecked = checked;\n        this.onChange(this.nzChecked);\n        this.nzCheckedChange.emit(this.nzChecked);\n        if (this.nzCheckboxWrapperComponent) {\n          this.nzCheckboxWrapperComponent.onChange();\n        }\n      }\n    }\n    writeValue(value) {\n      this.nzChecked = value;\n      this.cdr.markForCheck();\n    }\n    registerOnChange(fn) {\n      this.onChange = fn;\n    }\n    registerOnTouched(fn) {\n      this.onTouched = fn;\n    }\n    setDisabledState(disabled) {\n      this.nzDisabled = disabled;\n      this.cdr.markForCheck();\n    }\n    focus() {\n      this.focusMonitor.focusVia(this.inputElement, 'keyboard');\n    }\n    blur() {\n      this.inputElement.nativeElement.blur();\n    }\n    ngOnInit() {\n      var _a;\n      this.focusMonitor.monitor(this.elementRef, true).subscribe(focusOrigin => {\n        if (!focusOrigin) {\n          Promise.resolve().then(() => this.onTouched());\n        }\n      });\n      if (this.nzCheckboxWrapperComponent) {\n        this.nzCheckboxWrapperComponent.addCheckbox(this);\n      }\n      (_a = this.directionality.change) === null || _a === void 0 ? void 0 : _a.pipe(takeUntil(this.destroy$)).subscribe(direction => {\n        this.dir = direction;\n        this.cdr.detectChanges();\n      });\n      this.dir = this.directionality.value;\n    }\n    ngAfterViewInit() {\n      if (this.nzAutoFocus) {\n        this.focus();\n      }\n    }\n    ngOnDestroy() {\n      this.focusMonitor.stopMonitoring(this.elementRef);\n      if (this.nzCheckboxWrapperComponent) {\n        this.nzCheckboxWrapperComponent.removeCheckbox(this);\n      }\n      this.destroy$.next();\n      this.destroy$.complete();\n    }\n  }\n  __decorate([InputBoolean(), __metadata(\"design:type\", Object)], NzCheckboxComponent.prototype, \"nzAutoFocus\", void 0);\n  __decorate([InputBoolean(), __metadata(\"design:type\", Object)], NzCheckboxComponent.prototype, \"nzDisabled\", void 0);\n  __decorate([InputBoolean(), __metadata(\"design:type\", Object)], NzCheckboxComponent.prototype, \"nzIndeterminate\", void 0);\n  __decorate([InputBoolean(), __metadata(\"design:type\", Object)], NzCheckboxComponent.prototype, \"nzChecked\", void 0);\n\n  /**\n   * Use of this source code is governed by an MIT-style license that can be\n   * found in the LICENSE file at https://github.com/NG-ZORRO/ng-zorro-antd/blob/master/LICENSE\n   */\n  return NzCheckboxComponent;\n})();\nlet NzCheckboxGroupComponent = /*#__PURE__*/(() => {\n  class NzCheckboxGroupComponent {\n    constructor(elementRef, focusMonitor, cdr, directionality) {\n      this.elementRef = elementRef;\n      this.focusMonitor = focusMonitor;\n      this.cdr = cdr;\n      this.directionality = directionality;\n      this.onChange = () => {};\n      this.onTouched = () => {};\n      this.options = [];\n      this.nzDisabled = false;\n      this.dir = 'ltr';\n      this.destroy$ = new Subject();\n      // TODO: move to host after View Engine deprecation\n      this.elementRef.nativeElement.classList.add('ant-checkbox-group');\n    }\n    trackByOption(_, option) {\n      return option.value;\n    }\n    onCheckedChange(option, checked) {\n      option.checked = checked;\n      this.onChange(this.options);\n    }\n    ngOnInit() {\n      var _a;\n      this.focusMonitor.monitor(this.elementRef, true).subscribe(focusOrigin => {\n        if (!focusOrigin) {\n          Promise.resolve().then(() => this.onTouched());\n        }\n      });\n      (_a = this.directionality.change) === null || _a === void 0 ? void 0 : _a.pipe(takeUntil(this.destroy$)).subscribe(direction => {\n        this.dir = direction;\n        this.cdr.detectChanges();\n      });\n      this.dir = this.directionality.value;\n    }\n    ngOnDestroy() {\n      this.focusMonitor.stopMonitoring(this.elementRef);\n      this.destroy$.next();\n      this.destroy$.complete();\n    }\n    writeValue(value) {\n      this.options = value;\n      this.cdr.markForCheck();\n    }\n    registerOnChange(fn) {\n      this.onChange = fn;\n    }\n    registerOnTouched(fn) {\n      this.onTouched = fn;\n    }\n    setDisabledState(disabled) {\n      this.nzDisabled = disabled;\n      this.cdr.markForCheck();\n    }\n  }\n  __decorate([InputBoolean(), __metadata(\"design:type\", Object)], NzCheckboxGroupComponent.prototype, \"nzDisabled\", void 0);\n\n  /**\n   * Use of this source code is governed by an MIT-style license that can be\n   * found in the LICENSE file at https://github.com/NG-ZORRO/ng-zorro-antd/blob/master/LICENSE\n   */\n  return NzCheckboxGroupComponent;\n})();\nclass NzCheckboxModule {}\n/**\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://github.com/NG-ZORRO/ng-zorro-antd/blob/master/LICENSE\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { NzCheckboxComponent, NzCheckboxGroupComponent, NzCheckboxModule, NzCheckboxWrapperComponent };\n//# sourceMappingURL=ng-zorro-antd-checkbox.js.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}