{"ast":null,"code":"import { __decorate, __metadata } from 'tslib';\nimport { Directionality, BidiModule } from '@angular/cdk/bidi';\nimport { Component, ViewEncapsulation, ChangeDetectorRef, Optional, Input, NgModule } from '@angular/core';\nimport { NzConfigService, WithConfig } from 'ng-zorro-antd/core/config';\nimport { InputNumber, InputBoolean } from 'ng-zorro-antd/core/util';\nimport { Subject, BehaviorSubject, ReplaySubject, timer } from 'rxjs';\nimport { startWith, distinctUntilChanged, switchMap, debounce, takeUntil } from 'rxjs/operators';\nimport { ObserversModule } from '@angular/cdk/observers';\nimport { CommonModule } from '@angular/common';\nconst NZ_CONFIG_MODULE_NAME = 'spin';\nlet NzSpinComponent = /*#__PURE__*/(() => {\n  class NzSpinComponent {\n    constructor(nzConfigService, cdr, directionality) {\n      this.nzConfigService = nzConfigService;\n      this.cdr = cdr;\n      this.directionality = directionality;\n      this._nzModuleName = NZ_CONFIG_MODULE_NAME;\n      this.nzIndicator = null;\n      this.nzSize = 'default';\n      this.nzTip = null;\n      this.nzDelay = 0;\n      this.nzSimple = false;\n      this.nzSpinning = true;\n      this.destroy$ = new Subject();\n      this.spinning$ = new BehaviorSubject(this.nzSpinning);\n      this.delay$ = new ReplaySubject(1);\n      this.isLoading = false;\n      this.dir = 'ltr';\n    }\n    ngOnInit() {\n      var _a;\n      const loading$ = this.delay$.pipe(startWith(this.nzDelay), distinctUntilChanged(), switchMap(delay => {\n        if (delay === 0) {\n          return this.spinning$;\n        }\n        return this.spinning$.pipe(debounce(spinning => timer(spinning ? delay : 0)));\n      }), takeUntil(this.destroy$));\n      loading$.subscribe(loading => {\n        this.isLoading = loading;\n        this.cdr.markForCheck();\n      });\n      this.nzConfigService.getConfigChangeEventForComponent(NZ_CONFIG_MODULE_NAME).pipe(takeUntil(this.destroy$)).subscribe(() => this.cdr.markForCheck());\n      (_a = this.directionality.change) === null || _a === void 0 ? void 0 : _a.pipe(takeUntil(this.destroy$)).subscribe(direction => {\n        this.dir = direction;\n        this.cdr.detectChanges();\n      });\n      this.dir = this.directionality.value;\n    }\n    ngOnChanges(changes) {\n      const {\n        nzSpinning,\n        nzDelay\n      } = changes;\n      if (nzSpinning) {\n        this.spinning$.next(this.nzSpinning);\n      }\n      if (nzDelay) {\n        this.delay$.next(this.nzDelay);\n      }\n    }\n    ngOnDestroy() {\n      this.destroy$.next();\n      this.destroy$.complete();\n    }\n  }\n  __decorate([WithConfig(), __metadata(\"design:type\", Object)], NzSpinComponent.prototype, \"nzIndicator\", void 0);\n  __decorate([InputNumber(), __metadata(\"design:type\", Object)], NzSpinComponent.prototype, \"nzDelay\", void 0);\n  __decorate([InputBoolean(), __metadata(\"design:type\", Object)], NzSpinComponent.prototype, \"nzSimple\", void 0);\n  __decorate([InputBoolean(), __metadata(\"design:type\", Object)], NzSpinComponent.prototype, \"nzSpinning\", void 0);\n\n  /**\n   * Use of this source code is governed by an MIT-style license that can be\n   * found in the LICENSE file at https://github.com/NG-ZORRO/ng-zorro-antd/blob/master/LICENSE\n   */\n  return NzSpinComponent;\n})();\nclass NzSpinModule {}\n/**\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://github.com/NG-ZORRO/ng-zorro-antd/blob/master/LICENSE\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { NzSpinComponent, NzSpinModule };\n//# sourceMappingURL=ng-zorro-antd-spin.js.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}