{"ast":null,"code":"import { Directive, Injectable, Component, ViewEncapsulation, ChangeDetectionStrategy, forwardRef, ChangeDetectorRef, ElementRef, Optional, Input, ViewChild, NgModule } from '@angular/core';\nimport { __decorate, __metadata } from 'tslib';\nimport { Directionality, BidiModule } from '@angular/cdk/bidi';\nimport { NG_VALUE_ACCESSOR, FormsModule } from '@angular/forms';\nimport { InputBoolean } from 'ng-zorro-antd/core/util';\nimport { ReplaySubject, Subject } from 'rxjs';\nimport { takeUntil } from 'rxjs/operators';\nimport { FocusMonitor } from '@angular/cdk/a11y';\nimport { CommonModule } from '@angular/common';\n\n/**\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://github.com/NG-ZORRO/ng-zorro-antd/blob/master/LICENSE\n */\nclass NzRadioButtonDirective {}\n/**\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://github.com/NG-ZORRO/ng-zorro-antd/blob/master/LICENSE\n */\nclass NzRadioService {\n  constructor() {\n    this.selected$ = new ReplaySubject(1);\n    this.touched$ = new Subject();\n    this.disabled$ = new ReplaySubject(1);\n    this.name$ = new ReplaySubject(1);\n  }\n  touch() {\n    this.touched$.next();\n  }\n  select(value) {\n    this.selected$.next(value);\n  }\n  setDisabled(value) {\n    this.disabled$.next(value);\n  }\n  setName(value) {\n    this.name$.next(value);\n  }\n}\n/**\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://github.com/NG-ZORRO/ng-zorro-antd/blob/master/LICENSE\n */\nlet NzRadioGroupComponent = /*#__PURE__*/(() => {\n  class NzRadioGroupComponent {\n    constructor(cdr, nzRadioService, elementRef, directionality) {\n      this.cdr = cdr;\n      this.nzRadioService = nzRadioService;\n      this.elementRef = elementRef;\n      this.directionality = directionality;\n      this.value = null;\n      this.destroy$ = new Subject();\n      this.onChange = () => {};\n      this.onTouched = () => {};\n      this.nzDisabled = false;\n      this.nzButtonStyle = 'outline';\n      this.nzSize = 'default';\n      this.nzName = null;\n      this.dir = 'ltr';\n      // TODO: move to host after View Engine deprecation\n      this.elementRef.nativeElement.classList.add('ant-radio-group');\n    }\n    ngOnInit() {\n      var _a;\n      this.nzRadioService.selected$.subscribe(value => {\n        if (this.value !== value) {\n          this.value = value;\n          this.onChange(this.value);\n        }\n      });\n      this.nzRadioService.touched$.subscribe(() => {\n        Promise.resolve().then(() => this.onTouched());\n      });\n      (_a = this.directionality.change) === null || _a === void 0 ? void 0 : _a.pipe(takeUntil(this.destroy$)).subscribe(direction => {\n        this.dir = direction;\n        this.cdr.detectChanges();\n      });\n      this.dir = this.directionality.value;\n    }\n    ngOnChanges(changes) {\n      const {\n        nzDisabled,\n        nzName\n      } = changes;\n      if (nzDisabled) {\n        this.nzRadioService.setDisabled(this.nzDisabled);\n      }\n      if (nzName) {\n        this.nzRadioService.setName(this.nzName);\n      }\n    }\n    ngOnDestroy() {\n      this.destroy$.next();\n      this.destroy$.complete();\n    }\n    writeValue(value) {\n      this.value = value;\n      this.nzRadioService.select(value);\n      this.cdr.markForCheck();\n    }\n    registerOnChange(fn) {\n      this.onChange = fn;\n    }\n    registerOnTouched(fn) {\n      this.onTouched = fn;\n    }\n    setDisabledState(isDisabled) {\n      this.nzDisabled = isDisabled;\n      this.nzRadioService.setDisabled(isDisabled);\n      this.cdr.markForCheck();\n    }\n  }\n  __decorate([InputBoolean(), __metadata(\"design:type\", Object)], NzRadioGroupComponent.prototype, \"nzDisabled\", void 0);\n\n  /**\n   * Use of this source code is governed by an MIT-style license that can be\n   * found in the LICENSE file at https://github.com/NG-ZORRO/ng-zorro-antd/blob/master/LICENSE\n   */\n  return NzRadioGroupComponent;\n})();\nlet NzRadioComponent = /*#__PURE__*/(() => {\n  class NzRadioComponent {\n    constructor(elementRef, cdr, focusMonitor, directionality, nzRadioService, nzRadioButtonDirective) {\n      this.elementRef = elementRef;\n      this.cdr = cdr;\n      this.focusMonitor = focusMonitor;\n      this.directionality = directionality;\n      this.nzRadioService = nzRadioService;\n      this.nzRadioButtonDirective = nzRadioButtonDirective;\n      this.isNgModel = false;\n      this.destroy$ = new Subject();\n      this.isChecked = false;\n      this.name = null;\n      this.isRadioButton = !!this.nzRadioButtonDirective;\n      this.onChange = () => {};\n      this.onTouched = () => {};\n      this.nzValue = null;\n      this.nzDisabled = false;\n      this.nzAutoFocus = false;\n      this.dir = 'ltr';\n    }\n    onHostClick(event) {\n      /** prevent label click triggered twice. **/\n      event.stopPropagation();\n      event.preventDefault();\n      if (!this.nzDisabled && !this.isChecked) {\n        if (this.nzRadioService) {\n          this.nzRadioService.select(this.nzValue);\n        }\n        if (this.isNgModel) {\n          this.isChecked = true;\n          this.onChange(true);\n        }\n      }\n    }\n    focus() {\n      this.focusMonitor.focusVia(this.inputElement, 'keyboard');\n    }\n    blur() {\n      this.inputElement.nativeElement.blur();\n    }\n    setDisabledState(disabled) {\n      this.nzDisabled = disabled;\n      this.cdr.markForCheck();\n    }\n    writeValue(value) {\n      this.isChecked = value;\n      this.cdr.markForCheck();\n    }\n    registerOnChange(fn) {\n      this.isNgModel = true;\n      this.onChange = fn;\n    }\n    registerOnTouched(fn) {\n      this.onTouched = fn;\n    }\n    ngOnInit() {\n      var _a;\n      if (this.nzRadioService) {\n        this.nzRadioService.name$.pipe(takeUntil(this.destroy$)).subscribe(name => {\n          this.name = name;\n          this.cdr.markForCheck();\n        });\n        this.nzRadioService.disabled$.pipe(takeUntil(this.destroy$)).subscribe(disabled => {\n          this.nzDisabled = disabled;\n          this.cdr.markForCheck();\n        });\n        this.nzRadioService.selected$.pipe(takeUntil(this.destroy$)).subscribe(value => {\n          this.isChecked = this.nzValue === value;\n          this.cdr.markForCheck();\n        });\n      }\n      this.focusMonitor.monitor(this.elementRef, true).subscribe(focusOrigin => {\n        if (!focusOrigin) {\n          Promise.resolve().then(() => this.onTouched());\n          if (this.nzRadioService) {\n            this.nzRadioService.touch();\n          }\n        }\n      });\n      (_a = this.directionality.change) === null || _a === void 0 ? void 0 : _a.pipe(takeUntil(this.destroy$)).subscribe(direction => {\n        this.dir = direction;\n        this.cdr.detectChanges();\n      });\n      this.dir = this.directionality.value;\n    }\n    ngAfterViewInit() {\n      if (this.nzAutoFocus) {\n        this.focus();\n      }\n    }\n    ngOnDestroy() {\n      this.destroy$.next();\n      this.destroy$.complete();\n      this.focusMonitor.stopMonitoring(this.elementRef);\n    }\n  }\n  __decorate([InputBoolean(), __metadata(\"design:type\", Object)], NzRadioComponent.prototype, \"nzDisabled\", void 0);\n  __decorate([InputBoolean(), __metadata(\"design:type\", Object)], NzRadioComponent.prototype, \"nzAutoFocus\", void 0);\n\n  /**\n   * Use of this source code is governed by an MIT-style license that can be\n   * found in the LICENSE file at https://github.com/NG-ZORRO/ng-zorro-antd/blob/master/LICENSE\n   */\n  return NzRadioComponent;\n})();\nclass NzRadioModule {}\n/**\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://github.com/NG-ZORRO/ng-zorro-antd/blob/master/LICENSE\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { NzRadioButtonDirective, NzRadioComponent, NzRadioGroupComponent, NzRadioModule, NzRadioService };\n//# sourceMappingURL=ng-zorro-antd-radio.js.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}